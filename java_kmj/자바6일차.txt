
		//com배열과 user배열에서 다른 번지를 비교하여 같은 숫자가 있으면
		//ball를 증가
		//com[0]과 user[1], user[2]와 비교
		//com[1]과 user[0], user[2]를 비교
		//com[2]과 user[0], user[1]를 비교
		for( i = 0; i < com.lenghth; i += 1) {
			for( k=0; k < user.length; k +=1) {
				if(i== k ) {
					continue;
				
				if(com[i] == user[k]) {
					ball+= 1;
					}
				}
				
			}
		}	





열거형
-목표 : 열거형을 만들고 사용할 수 있다.
- 상수에 이름을 붙이는 것
- 열거타입 선언
 enum  열거형명{이름1, 이름2, 이름3,...}
-열거타입 변수 선언
 열거형명 변수명;
 열거형명 변수명 = 열거형명.이름1;


자바
- 객체지형 프로그래밍 언어(OOP)
- 순서대로 동작
- 객체에 초점을 맞춤

C언어
- 절차지향 프로그래밍 언어
- 순서에 초점을 맞춤



- 설문지를 인쇄

-절차
 - 인쇄하는 기능을 이용하여 인쇄

-객체
 - 인쇄를 하기 위한 프린터(클래스) 설계도를 만듬
 - 설계도를 이용하여 프린터(인스턴스, 객체)를 생성
 - 프린터를 이용하여 인쇄

-클래스
 - 멤버 변수(정보들)
 - 멤버 메소드(기능들)
 - 생성자(초기화)

예)
- 자동차
 -멤버 변수 : 바퀴 수, 와이퍼갯수, 회사명, 차종, 차명, 시동(켜졌는지 꺼졌는지), 속력, 기어 등
 -멤버 메소드 : 시동 켜기, 끄기, 와이퍼 켜기, 끄기, 속력 .UP, Down등
 -생성자 : 바퀴수 4, 와이퍼 갯수2, 기아, 소형차, k5, 꺼짐, 0, 파킹(자동차의 기본정보들을 초기화할 수 있는것)


-클래스
 -클래스 선언 
clss 클래스명{
	멤버변수들;
	멤버메소드들;
	생성자;
}

 -클래스명 작성 규칙은 변수명 작성 규칙과 동일
 -클래스명 작성 관례 
  -클래스명의 첫글자는 대문자
 
 -객체 선언
클래스명 객체명;

 -객체 생성
클래스명 객체명 = new 클래스명();


- 멤버 변수와 일반 변수의 차이점
  - 일반 변수는 자동으로 초기화 되지 않음
  - 멤버 변수는 자동으로 초기화 됨

- 멤버 변수 사용
객체명.멤버변수명 = 값;

- 생성자 : 멤버 변수들을 초기화 하는곳
	 모든 클래스는 생성자가 필수
	 클래스에 생성자 코드가 없다면 자동으로 기본 생성자가 추가됨

- 기본 생성자 :클래스에서 생성자가 하나도 없으면 기본 생성자가 자동으로 만들어져서 호출됨
public 클래스명(){

}

- 생성자
public 클래스명(타입 변수명1, 타입 변수명2, ...){
	멤버변수명1 = 변수명1;
	멤버변수명2 = 변수명2;
	...
}


-메소드 : 기능을 모아놓은 코드

음료수 자판기	메소드
돈, 메뉴		매개변수(인자)
음료수		리턴타입


- 일을 시키려면 제대로된 정보를 전달 => 매개변수

예) 중국집에서 배달
배달		메소드
주소, 메뉴	매개변수
요리		리턴타입

- 메소드 선언 방법
리턴타입 메소드명(매개변수){
	구현;
	return 값;
}

음료수 음료수자판기(int 돈, String(타입) 메뉴){
	구현;
}
 -리턴타입 : 결과물을 묶을 수 있는 타입을 씀

- 메소드 생성 할 때, 다음을 정리
 1. 기능 : 기능을 상세하게 설명
 2. 매개변수 : 기능을 실행하기 위해 "꼭 필요한 정보"들을 매개변수로 만듬
 3. 리턴타입 : 기능을 실행 후 알려주는 정보를 리턴타입으로 설정
 4. 메소드명 : 적절한 단어를 이용하여 메소드명을 생성

- 메소드는 상황에 따라서 return 값이 없을 수 있다.
- 리턴타입이 없는 경우는 void라는 키워드로 대체
- 메소드의 매개변수는 변수 선언 시 값이 복사가 된다.
- 매개변수가 일반변수인 경우 원본값이 변하지 않음.
- 매개변수가 참조변수인 경우 원본 값이 변할 수 있음
- 일반변수 : 타입이 기본타입인 경우
	  값을 저장하는 변수
- 참조변수 : 타입이 기본타입이 아닌 경우, 배열, 열거형, 객체
	  값이 아닌 주소를 저장하는 변수


 
- 메소드를 왜 사용하는가?
 - 재사용을 통해 코드의 길이를 줄이기 위해
- 기능의 유지보수가 쉬워진다
- 코드의 구조를 파악하기 쉬워진다
























